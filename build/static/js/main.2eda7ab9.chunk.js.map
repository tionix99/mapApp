{"version":3,"sources":["api/ymap.js","components/ButtonControl.jsx","components/PlacemarkList.jsx","components/DistanceInfo.jsx","components/CoordPanel.jsx","components/MainPanel.jsx","index.js"],"names":["thisMap","mapContainer","appContainer","mapSetCenter","coords","zoom","setCenter","mapFitToViewport","style","height","clientHeight","offsetTop","container","fitToViewport","mapSetCenterAndZoom","points","condition","length","sort","a","b","min0","max0","i","result","ymaps","util","bounds","getCenterAndZoom","getSize","center","setClass","set","btn","this","props","setting","lbl","info","defval","label","on","off","ButtonControl","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","btnClass","status","onClick","e","target","classList","contains","trg","buttons","value","mode","htmlCollection","parentElement","children","remove","add","toggle","el","current","textContent","extClick","_this2","react_default","createElement","className","map","key","title","Component","InputNumber","state","val","onKeyDown","preventDefault","onChange","setState","Number","onMouseUp","path","index","evInputCoords","nextProps","nextState","type","min","max","step","CoordPlacemark","bind","placemark","evDeletePlacemark","name","PlacemarkList_InputNumber","latitude","formatSet","units","min2","max2","longitude","PlacemarkList","_this3","inputs","renderFunc","placemarkStore","list","push","PlacemarkList_CoordPlacemark","keys","DistanceInfo","routes","multiDistance","distance","shortDistance","formatButtons","stepButtons","DropSelectList","selectInfo","React","createRef","ref","components_ButtonControl","gr_dec","convertToDEC","coordinate","convertVal","Math","round","gr_min","roundTo00","num","arrToNum","arr","numToArr","inp2","abs","trunc","allPlacemarkCoords","placemarkNames","CoordPanel","format","update","Date","now","autozoomON","routeON","changeFormat","coordsToArr","changePolyline","allCoords","polyline","geometry","setCoordinates","j","coords1","coords2","coordSystem","geo","getDistance","calcDistance","evAutozoomClick","evRouteClick","multiRoute","model","setReferencePoints","evClickFormat","evClickStep","evCreatePlacemark","alert","get","geoObj","Placemark","iconContent","hintContent","draggable","geoObjects","addPlacemark","properties","events","getCoordinates","Polyline","addPolyline","multiRouter","MultiRoute","referencePoints","editorMidPointsType","editorDrawOver","addMultiRoute","getRoutes","distanceRoutes","text","getMultiRouteDistance","event","console","log","message","CoordPanel_DropSelectList","components_PlacemarkList","components_DistanceInfo","MainPanel","src_components_CoordPanel","document","getElementById","id","ready","Map","controls","size","position","right","top","zoomStep","ReactDOM","render","components_MainPanel","JQuery","resizable","minWidth","minHeight","stop","replaceWith"],"mappings":"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","file":"static/js/main.2eda7ab9.chunk.js","sourcesContent":["var thisMap;\r\nvar mapContainer;\r\nvar appContainer;\r\n\r\n\r\n/* \r\nКоординаты (широта от −90° до +90°, долгота от −180° до +180°) могут записываться:\r\n    в ° градусах в виде десятичной дроби (современный вариант)\r\n    в ° градусах и ′ минутах с десятичной дробью\r\n*/\r\n\r\nfunction initMap(mapEl, appEl) {\r\n\tif (process.env.NODE_ENV=== \"development\") {\r\n\t\tconsole.log (\"*** initMap\", Date.now());\r\n\t}\r\n\r\n\tappContainer= appEl;\r\n\tmapContainer= mapEl;\r\n\t// Создание карты.\r\n\t// https://tech.yandex.ru/maps/doc/jsapi/2.1/dg/concepts/map-docpage/\r\n\t\r\n\t\r\n\t// eslint-disable-next-line no-undef\r\n\tthisMap= new ymaps.Map(mapContainer, {\r\n\t\t// Координаты центра карты.\r\n\t\t// Порядок по умолчнию: «широта, долгота».\r\n\t\tcenter: [57.00, 33.00],\r\n\t\t// Уровень масштабирования. Допустимые значения:\r\n\t\t// от 0 (весь мир) до 19.\r\n\t\tzoom: 5,\r\n\t\t\r\n\t\t// Элементы управления\r\n\t\t// https://tech.yandex.ru/maps/doc/jsapi/2.1/dg/concepts/controls/standard-docpage/\r\n\t\tcontrols: [\r\n\r\n\t\t\t/* \"zoomControl\", // Ползунок масштаба */\r\n\t\t\t/* \t\"rulerControl\", // Линейка */\r\n\t\t\t/* \"routeButtonControl\", // Панель маршрутизации */\r\n\t\t\t/* \"trafficControl\", // Пробки */\r\n\t\t\t\"typeSelector\", // Переключатель слоев карты\r\n\t\t\t/* \"fullscreenControl\", // Переключатель полноэкранного режима */\r\n\r\n\t\t\t// Поисковая строка\r\n\t\t\t/* new ymaps.control.SearchControl({\r\n\t\t\t\toptions: {\r\n\t\t\t\t\t// вид - поисковая строка\r\n\t\t\t\t\tsize: \"large\",\r\n\t\t\t\t\t// Включим возможность искать не только топонимы, но и организации.\r\n\t\t\t\t\tprovider: \"yandex#search\"\r\n\t\t\t\t}\r\n\t\t\t}) */\r\n\r\n\t\t]\r\n\t});\r\n\r\n\tthisMap.controls.add(\"zoomControl\", {\r\n\t\tsize: \"large\", \r\n\t\tposition: {right: \"5px\", top: \"44px\"},\r\n\t\tzoomStep: 1\r\n\t}); \r\n\t\r\n}\r\n\r\nfunction mapSetCenter(coords, zoom) { // центрирует карту \r\n\tthisMap.setCenter(coords, zoom);\r\n}\r\n\r\n/* function mapSetZoom(zoom) { // зуммирует карту \r\n\tthisMap.setZoom(zoom);\r\n} */\r\n\r\nfunction mapFitToViewport() { // изменяет размер контейнера карты и саму карту в соответсвии с рамерами других элементов\r\n\tif (process.env.NODE_ENV=== \"development\") {\r\n\t\tconsole.log (\"*** mapFitToViewport\", Date.now());\r\n\t}\r\n\tmapContainer.style.height= (appContainer.clientHeight- mapContainer.offsetTop) + \"px\";\r\n\tthisMap.container.fitToViewport();\r\n}\r\n\r\n\r\nfunction mapSetCenterAndZoom(points, condition) { // центрирует и зуммирует карту по нескольким точкам\r\n\t\r\n\tif (condition) {\r\n\t\tif (process.env.NODE_ENV=== \"development\") {\r\n\t\t\tconsole.log (\"*** mapSetCenterAndZoom\", Date.now());\r\n\t\t}\r\n\t\t\r\n\t\tif (points.length=== 1) { // если точка всего одна центрируем карту по ней\r\n\t\t\tmapSetCenter(points[0]);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t/* if (a меньше b по некоторому критерию сортировки) {\r\n\t\t\t\treturn -1;\r\n\t\t\t} \r\n\t\t*/\r\n\t\tpoints.sort(function(a, b) { // для адекватной установки center требуется чтобы первым значением была координата с минимальной долготой\r\n\t\t\treturn a[1] - b[1];\r\n\t\t});\r\n\r\n\t\t// масштаб и центрование рассчитывается по двум точкам с минимальными и максимальными координатами \r\n\t\t// минимальное и максимальное значение долготы уже определены сортировкой - это первый и последний элементы points\r\n\t\t// если точек больше двух определим минимальную и максимальную широту самостоятельно\r\n\t\t\r\n\t\tif (points.length> 2) { \r\n\t\t\tlet min0= points[0][0];\r\n\t\t\tlet max0= points[0][0];\r\n\r\n\t\t\tfor (var i= 0; i < points.length; i++) { \r\n\t\t\t\tif (min0 > points[i][0]) {\r\n\t\t\t\t\tmin0= points[i][0];\r\n\t\t\t\r\n\t\t\t\t} else if (max0 < points[i][0]) {\r\n\t\t\t\t\tmax0= points[i][0];\r\n\t\t\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tpoints= [\r\n\t\t\t\t[min0, points[0][1]],\r\n\t\t\t\t[max0, points[points.length- 1][1]]\r\n\t\t\t];\r\n\r\n\t\t}\r\n\t\t\r\n\t\t// eslint-disable-next-line no-undef\r\n\t\tlet result= ymaps.util.bounds.getCenterAndZoom(points, thisMap.container.getSize());\r\n\t\t\r\n\t\t/* mapSetZoom(result.zoom); */\r\n\t\tmapSetCenter(result.center, result.zoom);\r\n\t}\r\n\t\r\n\t\r\n\t\r\n}\r\n\r\n\r\nfunction addPlacemark(name, coords) { // добавление метки на карту\r\n\tif (process.env.NODE_ENV=== \"development\") {\r\n\t\tconsole.log (\"*** addPlacemark\", Date.now());\r\n\t}\r\n\r\n\t// eslint-disable-next-line no-undef\r\n\tlet placemark= new ymaps.Placemark(coords, {\r\n\t\t// Хинт показывается при наведении мышкой на иконку метки.\r\n\t\ticonContent: name,\r\n\t\thintContent: \"Координаты: \" +coords,\r\n\t\t/* balloonContent: \"метка: \" +name, */\r\n\t}, {\r\n\t\tdraggable: true // разрешение перетаскивания метки\r\n\t});\r\n\r\n\t// После того как метка была создана, добавляем её на карту.\r\n\tthisMap.geoObjects.add(placemark);\r\n\treturn placemark;\r\n}\r\n\r\nfunction addPolyline(points) {\r\n\t// eslint-disable-next-line no-undef\r\n\tlet polyline= new ymaps.Polyline(points, {}, {});\r\n\tthisMap.geoObjects.add(polyline);\r\n\t/* polyline.editor.startEditing(); // возможность добавления точек*/\r\n\treturn polyline;\r\n}\r\n\r\n\r\n\r\nfunction movePlacemark(geoObj, coords) { // преремещение геообъекта на указанные координаты\r\n\t/* if (process.env.NODE_ENV=== \"development\") {\r\n\t\tconsole.log (\"*** movePlacemark\", Date.now());\r\n\t} */\r\n\r\n\tgeoObj.geometry.setCoordinates(coords);\r\n\tgeoObj.properties.set({hintContent: \"Координаты: \" +coords});\r\n}\r\n\r\nfunction getDistance(coords1, coords2) { // получение минимальной дистанции между двумя точками\r\n\t// eslint-disable-next-line no-undef\r\n\treturn ymaps.coordSystem.geo.getDistance(coords1, coords2);\r\n}\r\n\r\nfunction getMultiRouteDistance(multiRoute) { // получения дистанции по маршруту\r\n\tlet routes= multiRoute.model.getRoutes();\r\n\tlet distanceRoutes= [];\r\n\r\n\tfor (var i= 0; i < routes.length; i++) {\r\n\t\tdistanceRoutes.push(\r\n\t\t\t/* Math.round(((routes[i].properties.get(\"distance\").value)/1000)* 100)/100 */\r\n\t\t\troutes[i].properties.get(\"distance\").text\r\n\t\t);\r\n\t\t\r\n\t}\r\n\treturn distanceRoutes;\r\n\r\n}\r\n\r\nfunction addMultiRoute(points) { // добавление маршрута\r\n\r\n\tif (process.env.NODE_ENV=== \"development\") {\r\n\t\tconsole.log (\"*** addMultiRoute\", Date.now());\r\n\t}\r\n\t\t\r\n\r\n\t// eslint-disable-next-line no-undef\r\n\tlet multiRoute= new ymaps.multiRouter.MultiRoute({\r\n\t\t/* referencePoints: [\"Москва\", \"Тверь\"] */\r\n\t\t/* referencePoints: [[55,65, 37,55], [56.90, 35,68]] */\r\n\t\treferencePoints: points\r\n\t}, {\r\n\t\t// Тип промежуточных точек, которые могут быть добавлены при редактировании.\r\n\t\teditorMidPointsType: \"via\",\r\n\t\t// В режиме добавления новых путевых точек запрещаем ставить точки поверх объектов карты.\r\n\t\teditorDrawOver: false\r\n\t});\r\n\t\r\n\tthisMap.geoObjects.add(multiRoute);\r\n\t\r\n\treturn multiRoute;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction removeGeoObject(geoObj) {\r\n\tif (process.env.NODE_ENV=== \"development\") {\r\n\t\tconsole.log (\"*** removeGeoObject\", Date.now());\r\n\t}\r\n\r\n\tthisMap.geoObjects.remove(geoObj);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport {\r\n\tthisMap,\r\n\tinitMap,\r\n\r\n\tmapSetCenter,\r\n\tmapFitToViewport,\r\n\tmapSetCenterAndZoom,\r\n\r\n\taddPlacemark,\r\n\tmovePlacemark,\r\n\t\r\n\taddPolyline,\r\n\taddMultiRoute,\r\n\t\r\n\tgetDistance,\r\n\tgetMultiRouteDistance,\r\n\r\n\tremoveGeoObject,\r\n};","import React, { Component } from \"react\";\r\n\r\nif (process.env.NODE_ENV=== \"development\") {\r\n\tconsole.log(\"ButtonControl load\", Date.now());\r\n}\r\n\r\nlet setClass= { // класс btn помогает определить что клик произошел именно по элементу управления\r\n\tset: function (btn) { // устанавливает включенной кнопку если ее btn.lbl совпадает с this.props.setting\r\n\t\tif (this.props.setting=== btn.lbl) { \r\n\t\t\tif (this.props.info) { // this.props.info элемент - родительского компонента еще не отрисованный на момент инициализации ButtonControl\r\n\t\t\t\t/* console.log(this.props.info); */\r\n\t\t\t\tthis.props.info.defval= btn.label;// если есть this.props.info устанавливает его defval которое будет установлено в textContent родительским компонентом при его отрисовке\r\n\t\t\t} // такая система позволяет не запусать рендер родительского компонента для установки значения this.props.info\r\n\t\t\treturn \"btn ON\";\r\n\t\t\t\r\n\t\t} else {\r\n\t\t\treturn \"btn\";\r\n\t\t}\r\n\t},\r\n\t\r\n\ton: function() { return \"btn ON\";},// устанавливает все кнопки включенными\r\n\t\r\n\toff: function() { return \"btn\";}, // устанавливает все кнопки выключенными\r\n};\r\n\r\n\r\n\r\n\r\nclass ButtonControl extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\t\r\n\t\tthis.btnClass= setClass[props.status];\r\n\r\n\t\tthis.onClick= (e)=> { // базовое поведение ButtonControl при клике\r\n\t\t\t/* if (process.env.NODE_ENV=== \"development\") {\r\n\t\t\t\tconsole.log (\"!!!-ButtonControl click\", Date.now());\r\n\t\t\t\t\r\n\t\t\t} */\r\n\t\t\t\r\n\t\t\tif (e.target.classList.contains(\"btn\")) {\r\n\t\t\t\tlet trg= e.target;\r\n\t\t\t\tlet btn= this.props.buttons[e.target.value];\r\n\r\n\t\t\t\tif (this.props.mode=== \"select\") { // если установлен mode \"select\" убирает класс со всех элементов списка, устанавливает класс на элемент сгенерировавший событие\r\n\t\t\t\t\tlet htmlCollection= trg.parentElement.children;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\tfor (var i= 0; i< htmlCollection.length; i++) {\r\n\t\t\t\t\t\thtmlCollection[i].classList.remove(\"ON\");\r\n\t\t\t\t\t} \r\n\t\t\t\r\n\t\t\t\t\ttrg.classList.add(\"ON\");\r\n\t\t\t\r\n\t\t\t\t} else { // иначе включает/выключает класс на элементе\r\n\t\t\t\t\ttrg.classList.toggle(\"ON\");\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.props.info) { //если была передана ссыклка на элемент info из родительского компонента - устанавливает его значение\r\n\t\t\t\t\tthis.props.info.el.current.textContent= btn.label;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.props.extClick) { // если была передана фукция расширенного поведения - выполняем ее\r\n\t\t\t\t\tthis.props.extClick(btn, e.target);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\r\n\tshouldComponentUpdate() { return false; }// запрет перерисовки компонента - этот компонент не обновляется при обновлении родителя\r\n\t\t\r\n\t\r\n\trender() {\r\n\t\tif (process.env.NODE_ENV=== \"development\") {\r\n\t\t\tconsole.log (\"ButtonControl_render\", Date.now());\r\n\r\n\t\t}\r\n\t\r\n\t\treturn <ul\r\n\t\t\tclassName= {this.props.className} \r\n\t\t\tonClick= {this.onClick}\r\n\t\t>\r\n\t\t\t{this.props.buttons.map((btn, i)=> {\r\n\r\n\t\t\t\treturn <li \r\n\t\t\t\t\tkey= {i} \r\n\t\t\t\t\tvalue= {i} \r\n\t\t\t\t\tclassName= {this.btnClass(btn)}\r\n\t\t\t\t\ttitle= {btn.title}\r\n\r\n\t\t\t\t>\r\n\t\t\t\t\t{btn.label}\r\n\r\n\t\t\t\t\t\r\n\t\t\t\t</li>;\r\n\r\n\t\t\t})}\r\n\t\t</ul>;\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default ButtonControl;","import React, { Component } from \"react\";\r\n\r\n\r\nimport {\r\n\tmapFitToViewport,// установка карты в размер контейнера\r\n} from \"../api/ymap.js\";\r\n\r\n\r\nif (process.env.NODE_ENV=== \"development\") {\r\n\tconsole.log(\"PlacemarkList load\", Date.now());\r\n}\r\n\r\n\r\n\r\nclass InputNumber extends Component { \r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state= { // компоненты React типа input не обновляют value без изменения state или props\r\n\t\t\tval: 0,\r\n\t\t};\r\n\r\n\t\tthis.onKeyDown= (e)=> { // запрет ввода с клавиатуры\r\n\t\t\te.preventDefault();\r\n\t\t};\r\n\r\n\t\tthis.onChange= (e)=> { // событие изменения значения\r\n\t\t\tthis.setState({\r\n\t\t\t\tval: Number(e.target.value)\r\n\t\t\t});\r\n\r\n\t\t};\r\n\r\n\t\tthis.onMouseUp= ()=> { // событие окончания изменения значения\r\n\t\t\tthis.props.path[this.props.index]= this.state.val; // установка значения val в переданный объект/массив\r\n\t\t\tthis.props.evInputCoords();\r\n\t\t};\r\n\r\n\r\n\t\tthis.state.val= this.props.path[this.props.index]; // установка первичных значений\r\n\t\tthis.value= this.props.path[this.props.index]; \r\n\r\n\t}\r\n\r\n\tshouldComponentUpdate(nextProps, nextState) { \r\n\t\t// this.value - значение которое отображает input\r\n\t\t// значение this.value изменяют два события - измение соответсвующего значения в state или изменение соответсвующего значения в props\r\n\t\t// событие изменения state имеет приоритет выполнения\r\n\t\tif (this.state.val!== nextState.val) { // эта проверка должна быть первой и иметь свой return чтбы лишний раз не отрабатывалась вторая\r\n\t\t\tthis.value= nextState.val;\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tif (this.value!== nextProps.path[this.props.index]) {\r\n\t\t\tthis.value= nextProps.path[this.props.index];\r\n\t\t\t/* return true; */\r\n\t\t}\r\n\t\t\r\n\t\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\r\n\trender() {\r\n\t\t/* if (process.env.NODE_ENV=== \"development\") {\r\n\t\t\tconsole.log (\r\n\t\t\t\t\"InputNumber render\", \r\n\t\t\t\tthis.props.path[this.props.index],\r\n\t\t\t\tthis.props.index,\r\n\t\t\t\tDate.now()\r\n\t\t\t);\r\n\t\t} */\r\n\t\t\r\n\t\treturn <input \r\n\t\t\ttype= \"number\"\r\n\t\t\tvalue= {this.value}\r\n\t\t\t\r\n\t\t\tmin= {this.props.min}\r\n\t\t\tmax= {this.props.max}\r\n\r\n\t\t\tstep= {this.props.step}\r\n\r\n\t\t\tonChange= {this.onChange}\r\n\t\t\tonKeyDown= {this.onKeyDown}\r\n\t\t\tonMouseUp= {this.onMouseUp}\r\n\r\n\t\t/>;\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\n\r\nclass CoordPlacemark extends Component { // компонент панели ввода координат\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\t\r\n\t\tthis.evInputCoords= this.props.evInputCoords.bind(false, this.props.placemark); // привязываем к событию объект placemark\r\n\t\tthis.evDeletePlacemark= this.props.evDeletePlacemark.bind(false, this.props.placemark);\r\n\r\n\t}\r\n\r\n\r\n\trender() {\r\n\t\tif (process.env.NODE_ENV=== \"development\") {\r\n\t\t\tconsole.log (\r\n\t\t\t\t\"CoordPlacemark render\", \r\n\t\t\t\tthis.props.placemark.name,\r\n\t\t\t\tDate.now()\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\treturn <ul\r\n\t\t\tclassName= \"str\"\r\n\t\t>\r\n\t\t\t<li>\r\n\t\t\t\t<label>\r\n\t\t\t\t\tКоординаты {this.props.placemark.name}:\r\n\t\t\t\t</label>\r\n\t\t\t</li>\r\n\t\t\t\r\n\t\t\t<li>\r\n\t\t\t\t<label>\r\n\t\t\t\t\tШирота:\r\n\t\t\t\t</label>\r\n\r\n\t\t\t\t<InputNumber \r\n\t\t\t\t\tmin= {-89}\r\n\t\t\t\t\tmax= {89}\r\n\t\t\t\t\tstep= {this.props.step}\r\n\r\n\t\t\t\t\t\r\n\t\t\t\t\tpath= {this.props.placemark.latitude}\r\n\t\t\t\t\tindex= {0}\r\n\t\t\t\t\t\r\n\t\t\t\t\tevInputCoords= {this.evInputCoords}\r\n\t\t\t\t/>\r\n\r\n\t\t\t\t{this.props.formatSet.units[0]}\r\n\r\n\t\t\t\t<InputNumber \r\n\t\t\t\t\tmin= {this.props.formatSet.min2}\r\n\t\t\t\t\tmax= {this.props.formatSet.max2}\r\n\r\n\t\t\t\t\tstep= {this.props.step}\r\n\r\n\t\t\t\t\tpath= {this.props.placemark.latitude}\r\n\t\t\t\t\tindex= {1}\r\n\t\t\t\t\t\r\n\t\t\t\t\tevInputCoords= {this.evInputCoords}\r\n\t\t\t\t/> \r\n\r\n\t\t\t\t{this.props.formatSet.units[1]}\r\n\t\t\t\t\r\n\r\n\t\t\t</li>\r\n\r\n\t\t\t<li>\r\n\t\t\t\t<label>\r\n\t\t\t\t\tДолгота:\r\n\t\t\t\t</label>\r\n\r\n\t\t\t\t<InputNumber \r\n\t\t\t\t\tmin= {-179}\r\n\t\t\t\t\tmax= {179}\r\n\t\t\t\t\tstep= {this.props.step}\r\n\t\t\t\t\t\r\n\t\t\t\t\tpath= {this.props.placemark.longitude}\r\n\t\t\t\t\tindex= {0}\r\n\r\n\t\t\t\t\tevInputCoords= {this.evInputCoords}\r\n\t\t\t\t/> \r\n\r\n\t\t\t\t{this.props.formatSet.units[0]}\r\n\t\t\t\t\r\n\t\t\t\t<InputNumber \r\n\t\t\t\t\tmin= {this.props.formatSet.min2}\r\n\t\t\t\t\tmax= {this.props.formatSet.max2}\r\n\t\t\t\t\tstep= {this.props.step}\r\n\r\n\t\t\t\t\tpath= {this.props.placemark.longitude}\r\n\t\t\t\t\tindex= {1}\r\n\t\t\t\t\t\r\n\t\t\t\t\tevInputCoords= {this.evInputCoords}\r\n\t\t\t\t/>\r\n\r\n\t\t\t\t{this.props.formatSet.units[1]}\r\n\t\t\t\t<button\r\n\t\t\t\t\tonClick= {this.evDeletePlacemark}\r\n\t\t\t\t>\r\n\t\t\t\t\tX\r\n\t\t\t\t</button>\r\n\t\t\t</li>\r\n\t\t\t\t\r\n\t\t</ul>;\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\nclass PlacemarkList extends Component { // компонент генерации списка координат меток\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.inputs= 0;\r\n\r\n\t\tthis.renderFunc= (placemarkStore)=> {\r\n\t\t\tlet list= [];\r\n\t\t\tfor (var key in placemarkStore) { // проходим по объекту placemarkStore генерируя компоненты CoordPlacemark по его свойствам\r\n\t\t\t\tlist.push(\r\n\t\t\t\t\t<CoordPlacemark \r\n\t\t\t\t\t\tkey= {key}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tplacemark= {placemarkStore[key]}\r\n\t\t\t\t\t\tformatSet= {this.props.formatSet}\r\n\t\t\t\t\t\tstep= {this.props.step}\r\n\r\n\t\t\t\t\t\tevInputCoords= {this.props.evInputCoords}\r\n\t\t\t\t\t\tevDeletePlacemark= {this.props.evDeletePlacemark}\r\n\t\t\t\t\t/>\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\treturn list;\r\n\t\t};\r\n\t}\r\n\r\n\tcomponentDidUpdate() {\r\n\t\t// после перерисовки компонента если число отображаемых меток изменилось то обновляем размер карты чтобы она помещалась в окно приложения\r\n\t\tif (this.inputs!== Object.keys(this.props.placemarkStore).length) { // если изменилось количество отображаемых строк - подгоняем карту\r\n\t\t\t// eslint-disable-next-line no-undef\r\n\t\t\tif (process.env.NODE_ENV=== \"development\") {\r\n\t\t\t\tconsole.log(\"PlacemarkList update\", Date.now());\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tmapFitToViewport();\r\n\t\t\tthis.inputs= Object.keys(this.props.placemarkStore).length;\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t}\r\n\r\n\trender() {\r\n\t\tif (process.env.NODE_ENV=== \"development\") {\r\n\t\t\tconsole.log (\r\n\t\t\t\t\"PlacemarkList render\", \r\n\t\t\t\t/* this.props.placemark.label, */\r\n\t\t\t\tDate.now()\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\treturn <ul>\r\n\t\t\t{\r\n\t\t\t\tthis.renderFunc(this.props.placemarkStore)\r\n\t\t\t}\r\n\t\t\t\r\n\t\t</ul>;\r\n\t}\r\n}\r\n\r\n\t\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default PlacemarkList;","\r\nimport React, { Component } from \"react\";\r\n\r\nimport {\r\n\tmapFitToViewport, // установка карты в размер контейнера\r\n} from \"../api/ymap.js\";\r\n\r\nif (process.env.NODE_ENV=== \"development\") {\r\n\tconsole.log(\"DistanceInfo load\", Date.now());\r\n}\r\n\r\n\r\n\r\nclass DistanceInfo extends Component { // компонент отображающий информацию о дистанциях\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\t\r\n\t\tthis.routes= 0;\r\n\r\n\t\tthis.renderFunc= (multiDistance)=> {\r\n\t\t\tif (multiDistance.length=== 0) {\r\n\t\t\t\treturn <li>\r\n\t\t\t\t\tМаршрут не найден\r\n\t\t\t\t</li>;\r\n\r\n\t\t\t} else {\r\n\t\t\t\treturn multiDistance.map((distance, i)=> {\r\n\t\t\t\t\treturn <li \r\n\t\t\t\t\t\tkey= {i} \r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tМаршрут {i+ 1}: {distance}\r\n\t\t\t\t\t</li>;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\r\n\t\r\n\r\n\tcomponentDidUpdate() {\r\n\t\tif (this.routes!== this.props.multiDistance.length) { // если изменилось количество отображаемых строк - подгоняем карту\r\n\t\t\t// eslint-disable-next-line no-undef\r\n\t\t\tif (process.env.NODE_ENV=== \"development\") {\r\n\t\t\t\tconsole.log(\"DistanceInfo update\", Date.now());\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tmapFitToViewport();\r\n\t\t\tthis.routes= this.props.multiDistance.length;\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\tif (process.env.NODE_ENV=== \"development\") {\r\n\t\t\tconsole.log (\r\n\t\t\t\t\"DistanceInfo render\", \r\n\t\t\t\t/* this.props.placemark.label, */\r\n\t\t\t\tDate.now()\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\treturn <ul>\r\n\t\t\t<li>\r\n\t\t\t\tМинимальное расстояние: {this.props.shortDistance} км.\r\n\t\t\t</li>\r\n\t\t\t\r\n\t\t\t{\r\n\t\t\t\tthis.renderFunc(this.props.multiDistance)\r\n\t\t\t}\r\n\t\t\t\r\n\t\t</ul>;\r\n\t}\r\n}\r\n\r\n\t\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default DistanceInfo;","import \"./CoordPanel.css\";\r\n\r\nimport React, { Component } from \"react\";\r\n\r\nimport {\r\n\tthisMap, // объект карты созданный ymaps.Map\r\n\tmapSetCenterAndZoom, // центрирует и зуммирует карту исходяя из указанного массива координат\r\n\r\n\taddPlacemark, // добавление метки на карту\r\n\tmovePlacemark, // перемещение метки по карте\r\n\tremoveGeoObject, // удаелние метки а фактически любого указанного геообъекта\r\n\r\n\taddPolyline, // добавление полилинни по массиву координат\r\n\taddMultiRoute, // добавление маршрута по массиву координат\r\n\t\r\n\tgetDistance, // расчет расстояния по геодезической линии между двумя координатами\r\n\tgetMultiRouteDistance // расчет расстояяния по маршрутам\r\n} from \"../api/ymap.js\";\r\n\r\n\r\n\r\n// eslint-disable-next-line no-unused-vars\r\nimport ButtonControl from \"./ButtonControl.jsx\"; // селектор \r\n\r\n// eslint-disable-next-line no-unused-vars\r\nimport PlacemarkList from \"./PlacemarkList.jsx\"; // список указанных меток с окнами ввода координат\r\n\r\n// eslint-disable-next-line no-unused-vars\r\nimport DistanceInfo from \"./DistanceInfo.jsx\"; // отображения рассчитанных расстояний\r\n\r\nif (process.env.NODE_ENV=== \"development\") {\r\n\tconsole.log(\"CoordPanel load\", Date.now());\r\n}\r\n\r\n\r\nconst formatButtons= [ // значения кнопок для выпадающего списка \"формат\"\r\n\t{lbl: \"gr_dec\", label: \"dec 00.00°\", title: \"в градусах ° в виде десятичной дроби\"},\r\n\t{lbl: \"gr_min\", label: \"min 00°00'\", title: \"в градусах ° и  минутах '\"},\r\n];\r\n\r\n\r\nconst stepButtons= [ // значения кнопок для выпадающего списка \"шаг\"\r\n\t{lbl: 1, label: \"x01\"},\r\n\t{lbl: 5, label: \"x05\"},\r\n\t{lbl: 10, label: \"x10\"},\r\n\t{lbl: 15, label: \"x15\"},\r\n\t{lbl: 20, label: \"x20\"},\r\n\t\r\n];\r\n\r\n\r\n// eslint-disable-next-line no-unused-vars\r\nclass DropSelectList extends Component { // компонент выпадающего списка \r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.selectInfo= {\r\n\t\t\tel: React.createRef(), // ссылка на элемент отображающий выбранное в выпадающем списке значение\r\n\t\t\tdefval: \"\"\r\n\t\t};\r\n\t}\r\n\r\n\tshouldComponentUpdate() { return false; } // это неизменяемый компонент - обновление ему не нужно\r\n\r\n\tcomponentDidMount() { // значение this.selectInfo.defval устанавливает при своей инициализации ButtonControl, ButtonControl также по клику меняет this.selectInfo.current.textContent\r\n\t\tthis.selectInfo.el.current.textContent= this.selectInfo.defval;\r\n\t}\r\n\r\n\trender() {\r\n\t\tif (process.env.NODE_ENV=== \"development\") {\r\n\t\t\tconsole.log (\r\n\t\t\t\t\"DropSelectList render\", \r\n\t\t\t\tthis.props.label,\r\n\t\t\t\tDate.now()\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\treturn <li\r\n\t\t\tclassName= \"downdrop\"\r\n\t\t>\r\n\t\t\t<label>\r\n\t\t\t\t&#9660;{this.props.label}:\r\n\t\t\t</label>\r\n\t\t\r\n\r\n\t\t\t{/* eslint-disable-next-line jsx-a11y/anchor-is-valid */}\r\n\t\t\t<a \r\n\t\t\t\t\r\n\t\t\t\tref= {this.selectInfo.el} // отображает включенную в выпадающем списк кнопку\r\n\t\t\t>\r\n\t\t\t\t...\r\n\t\t\t</a>\r\n\r\n\t\t\t<ButtonControl \r\n\t\t\t\tclassName= \"submenu\" // заданный в style.css класс выпадающего списка\r\n\t\t\t\tmode= \"select\" // при выборе одного значения выбор с других значений снимается \r\n\r\n\t\t\t\tstatus= \"set\" // при инициализации компонента ButtonControl устанавливает выбранным значение указанное в setting\r\n\t\t\t\tsetting= {this.props.setting}\r\n\t\t\t\t\r\n\t\t\t\tinfo= {this.selectInfo} // передача ссылки на элемент this.selectInfo в ButtonControl позволяет изменять элемент this.selectInfo без обновления компонентов ButtonControl и DropSelectList\r\n\r\n\t\t\t\tbuttons= {this.props.buttons}\r\n\t\t\t\textClick= {this.props.extClick} // функци дополнительных действий при выборе\r\n\t\t\t/> \t\r\n\t\t</li>;\r\n\r\n\t}\r\n}\r\n\r\n\r\n\r\nconst formatSet= {\r\n\tgr_dec: {\r\n\t\tunits: [\".\", \"°\"], // отображаемые символы выбранных единиц измеренияя формата\r\n\r\n\t\tmin2: 0, // минимальное и максимальное значение дляя второго окна ввода координат  при указанном формате\r\n\t\tmax2: 99,\r\n\t\t// так как формат уже dec то преобразование не требуется\r\n\t\t// однозначный ответ на вопрос что лучше - писать условие на существование функции или просто вызвать пустую мне неизвестен\r\n\t\tconvertToDEC: function(coordinate) { \r\n\t\t\treturn coordinate;\r\n\t\t},\r\n\r\n\t\tconvertVal: function(coordinate) { // преобразование из min в dec используется при смене формата\r\n\t\t\tcoordinate[1]= Math.round(coordinate[1]/0.6);\r\n\t\t}\r\n\t},\r\n\r\n\tgr_min: {\r\n\t\tunits: [\"°\", \"'\"],\r\n\t\t\r\n\t\tmin2: 0,\r\n\t\tmax2: 59,\r\n\r\n\t\tconvertToDEC: function(coordinate) { // преобразование из min в dec\r\n\t\t\treturn [\r\n\t\t\t\tcoordinate[0],\r\n\t\t\t\tMath.round(coordinate[1]/0.6)\r\n\t\t\t];\r\n\t\r\n\t\t},\r\n\r\n\t\tconvertVal: function(coordinate) { // преобразование из dec в min\r\n\t\t\tcoordinate[1]= Math.round(coordinate[1]*0.6);\r\n\t\t}\r\n\t}\r\n};\r\n\r\nfunction roundTo00(num) { // преобразование 0.000000000 в 0.00\r\n\treturn Math.round(num* 100)/100;\r\n}\r\n\r\nfunction arrToNum(arr) { // преобразование [0,0] в 00.00\r\n\treturn arr[0]< 0 ? \r\n\t\troundTo00(arr[0] - arr[1]/100) :\r\n\t\troundTo00(arr[0] + arr[1]/100);\r\n}\r\n\r\nfunction numToArr(num) { // преобразование  00.00 в [0,0]\r\n\tlet inp2= Math.abs(Math.round((num%1)*100)); // дробная часть num приведенная к целому и взятая по модулю (тк дробная часть координаты положительна)\r\n\treturn [\r\n\t\tMath.trunc(num), // целая часть num, trunc адекватно возвращает целую часть отрицательных чисел\r\n\t\tinp2> 99? 99: inp2 // иногда округленное значение может оказаться больше максимально возможного\r\n\t];\r\n}\r\n\r\n\r\nfunction allPlacemarkCoords() { // возвращает массив координат из placemarkStore\r\n\tlet points= [];\r\n\tfor (var key in placemarkStore) {\r\n\t\tpoints.push(placemarkStore[key].coords);\r\n\t}\r\n\r\n\treturn points;\r\n}\r\n\r\nfunction calcDistance(points) { // расчет минимального расстояни\r\n\tif (points.length <2) {\r\n\t\treturn 0;\r\n\t} else {\r\n\t\tlet distance= 0;\r\n\r\n\t\tfor (var i= 0, j= 1; j< points.length;) {\r\n\t\t\tdistance= distance + getDistance(points[i], points[j]);\r\n\t\t\t\r\n\t\t\ti++;\r\n\t\t\tj++;\r\n\t\t}\r\n\r\n\t\tdistance= roundTo00(distance/1000); // getDistance возвращает расстояние в метрах - переводим в километры и округляем до разумной точности\r\n\r\n\t\treturn distance;\r\n\t}\r\n}\r\n\r\n\r\n\r\nconst placemarkNames= \"ABCDE\"; // \"массив\" допустимых имен меток\r\nconst placemarkStore= { // хранилище меток\r\n/* \tA: {\r\n\t\tname: \"A\",\r\n\t\tlatitude: [55, 71], \r\n\t\tlongitude: [37, 57],\r\n\t\tcoords: [0, 0],\r\n\t\tgeoObj: geoObj // ссылка на объект метки указанны на карте созданный ymaps.Placemark\r\n\t},\r\n\r\n*/\r\n};\r\n\r\n\r\n\r\n\r\n\r\n// eslint-disable-next-line no-unused-vars\r\nclass CoordPanel extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state= {\r\n\t\t\tformat: formatButtons[0].lbl, \r\n\t\t\tstep: 1,\r\n\t\t\tupdate: Date.now() // простой способ обновить компонент когда параметры события нас не волнуют\r\n\t\t};\r\n\r\n\t\tthis.formatSet= formatSet[this.state.format]; // this.formatSet= выбранные в банный момент настроййки формата\r\n\t\t\r\n\t\tthis.shortDistance= 0; // рассчитываемая минимальная дистанция между точками\r\n\t\tthis.multiDistance= []; // дистанция по маршрутам \r\n\r\n\t\tthis.autozoomON= \"ON\"; // значение кнопки \"автозум\"\r\n\t\tthis.routeON= \"\"; // значение кнопки \"маршрут\"\r\n\r\n\t\tthis.changeFormat= (format, placemark)=> { // изменяет latitude/longitude на значения указанного формата\r\n\t\t\tformatSet[format].convertVal(placemark.latitude);\r\n\t\t\tformatSet[format].convertVal(placemark.longitude);\r\n\t\t};\r\n\r\n\t\tthis.coordsToArr= (placemark)=> { // заполнение полей latitude[]/longitude [] в placemark\r\n\t\t\tplacemark.latitude= numToArr(placemark.coords[0]); // пробразование в фотмат latitude[]/longitude []\r\n\t\t\tplacemark.longitude= numToArr(placemark.coords[1]);\r\n\r\n\t\t\tif (this.state.format=== \"gr_min\") { // ymaps использует формат в десятках и если текущий формат в минутах то преобразовываем\r\n\t\t\t\tthis.changeFormat(\"gr_min\", placemark);\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tthis.changePolyline= ()=> { // изменяет положение полилинии на карте и пересчитывает минимальную дистанцию\r\n\t\t\tlet allCoords= allPlacemarkCoords();\r\n\t\t\tthis.polyline.geometry.setCoordinates(allCoords);\r\n\t\t\tthis.shortDistance= calcDistance(allCoords);\r\n\t\t\treturn allCoords;\r\n\t\t};\r\n\r\n\r\n\t\tthis.evAutozoomClick= (e)=> { // для разнообразия и для того чтобы не дергать компонент на обновление оформим переключатель autozoomON так\r\n\t\t\tif (e.target.classList.contains(\"ON\")) {\r\n\t\t\t\tthis.autozoomON= \"\";\r\n\t\t\t\te.target.classList.remove(\"ON\");\r\n\t\t\t} else {\r\n\t\t\t\tthis.autozoomON= \"ON\";\r\n\t\t\t\te.target.classList.add(\"ON\");\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tthis.evRouteClick= (e)=> {\r\n\t\t\tif (e.target.classList.contains(\"ON\")) { // если маршрут выключен - сбрасываем координаты this.multiRoute\r\n\t\t\t\tthis.routeON= \"\";\r\n\t\t\t\te.target.classList.remove(\"ON\");\r\n\t\t\t\t\r\n\t\t\t\tthis.multiRoute.model.setReferencePoints([]);\r\n\r\n\t\t\t} else { // иначе - устанавливаем координаты this.multiRoute\r\n\t\t\t\tthis.routeON= \"ON\";\r\n\t\t\t\te.target.classList.add(\"ON\");\r\n\t\t\t\t\r\n\t\t\t\tthis.multiRoute.model.setReferencePoints(allPlacemarkCoords());\r\n\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tthis.evClickFormat= (btn)=> { // клик по выпадающему списку \"формат\"\r\n\t\t\tif (process.env.NODE_ENV=== \"development\") {\r\n\t\t\t\tconsole.log (\r\n\t\t\t\t\t\"!!! evClickFormat\", \r\n\t\t\t\t\tDate.now()\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (this.state.format!== btn.lbl) { // проверка что клик произошел по другой кнопке а не по той же самой\r\n\t\t\t\tthis.formatSet= formatSet[btn.lbl];\r\n\t\t\t\t\r\n\t\t\t\tfor (var key in placemarkStore) { // меняем формат для всех меток в placemarkStore\r\n\t\t\t\t\tthis.changeFormat(btn.lbl, placemarkStore[key]);\r\n\r\n\t\t\t\t}\r\n\t\t\t\tthis.setState({format: btn.lbl});\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tthis.evClickStep= (btn)=> { // клик по выпадающему списку \"шаг\"\r\n\t\t\tif (process.env.NODE_ENV=== \"development\") {\r\n\t\t\t\tconsole.log (\r\n\t\t\t\t\t\"!!! evClickStep\", \r\n\t\t\t\t\tDate.now()\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\tif (this.state.step!== btn.lbl) {\r\n\t\t\t\tthis.setState({step: btn.lbl});\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tthis.evCreatePlacemark= (e)=> { // событие создания метки на карте\r\n\r\n\t\t\tif (process.env.NODE_ENV=== \"development\") {\r\n\t\t\t\tconsole.log (\r\n\t\t\t\t\t\"!!! evCreatePlacemark\", \r\n\t\t\t\t\tDate.now()\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\tif (Object.keys(placemarkStore).length>= placemarkNames.length) { // если меток больше указанного количества\r\n\t\t\t\talert(\"Максимальное количество точек: \" +placemarkNames.length);\r\n\r\n\t\t\t} else { // иначе создаем placemark и помещаем в placemarkStore\r\n\t\t\t\tlet placemark= {};\r\n\t\t\t\t\r\n\t\t\t\tfor (var i= 0; i< placemarkNames.length; i++) { // поиск первого незанятого имени \r\n\t\t\t\t\tif (!placemarkStore[placemarkNames[i]]) {\r\n\t\t\t\t\t\tplacemark.name= placemarkNames[i];\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tplacemarkStore[placemark.name]= placemark;\r\n\t\t\t\tplacemark.coords= e.get(\"coords\"); // получения координат клика на карте\r\n\t\t\t\tplacemark.geoObj= addPlacemark(placemark.name, placemark.coords); // создаем геообъект метки\r\n\t\t\t\tplacemark.geoObj.properties.set({hintContent: \"Координаты: \" +placemark.coords});\r\n\t\t\t\t\r\n\r\n\t\t\t\tthis.coordsToArr(placemark); //  заполнение полей latitude[]/longitude\r\n\t\t\t\tthis.changePolyline(); // обновление положения полилинии и расстояния\r\n\r\n\t\t\t\tplacemark.geoObj.events.add(\"contextmenu\", // событие на правый клик (удаление метки)\r\n\t\t\t\t\tthis.evDeletePlacemark.bind(false, placemark)\r\n\t\t\t\t);\r\n\t\t\t\t\r\n\t\r\n\t\t\t\tplacemark.geoObj.events.add(\"dragend\", ()=> {// событие окончание переноса метки (пересчет координат)\r\n\t\t\t\t\tif (process.env.NODE_ENV=== \"development\") {\r\n\t\t\t\t\t\tconsole.log (\r\n\t\t\t\t\t\t\t\"!!! evDragEndPlacemark\", \r\n\t\t\t\t\t\t\tDate.now()\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\tplacemark.coords= placemark.geoObj.geometry.getCoordinates(); // получение новых координат из геообъекта метки\r\n\t\t\t\t\t\r\n\t\t\t\t\tthis.coordsToArr(placemark); //  заполнение полей latitude[]/longitude\r\n\t\t\t\t\tlet allCoords= this.changePolyline();\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (allCoords.length> 1) { // если точка только одна то нет смысла дергать карту\r\n\t\t\t\t\t\tmapSetCenterAndZoom( //зуммирование и центрирования карты по новым координатам \r\n\t\t\t\t\t\t\tallCoords, \r\n\t\t\t\t\t\t\tthis.autozoomON=== \"ON\"\r\n\t\t\t\t\t\t); \r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tthis.setState({update: Date.now()}); //обновление компонента\r\n\t\t\t\t});\r\n\r\n\t\t\t\tthis.setState({update: Date.now()}); \r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tthis.evDeletePlacemark= (placemark)=> { // событие удаления метки с карты\r\n\t\t\tif (process.env.NODE_ENV=== \"development\") {\r\n\t\t\t\tconsole.log (\r\n\t\t\t\t\t\"!!! evDeletePlacemark\", \r\n\t\t\t\t\tDate.now()\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\r\n\t\t\tremoveGeoObject(placemark.geoObj); // удаление объекта метки с карты\r\n\t\t\tdelete placemarkStore[placemark.name]; // удаление placemark из placemarkStore\r\n\t\t\t\r\n\t\t\tthis.changePolyline();\r\n\t\t\tthis.setState({update: Date.now()});\r\n\t\t};\r\n\r\n\t\tthis.evInputCoords= (placemark)=> { // событие ввода координат в окне метки PlacemarkList\r\n\t\t\tif (process.env.NODE_ENV=== \"development\") {\r\n\t\t\t\tconsole.log (\r\n\t\t\t\t\t\"!!! evInputCoords\", \r\n\t\t\t\t\tDate.now()\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tplacemark.coords[0]= arrToNum( // преобразуем latitude из [0,0] в 0.0\r\n\t\t\t\tthis.formatSet.convertToDEC(placemark.latitude) // переводим latitude в десятичную форму если исходный формат того требует\r\n\t\t\t);\r\n\t\t\tplacemark.coords[1]= arrToNum(this.formatSet.convertToDEC(placemark.longitude));\r\n\t\t\t\r\n\t\t\tmovePlacemark(placemark.geoObj, placemark.coords); // перемещаем объект геометки на карте\r\n\t\t\tplacemark.geoObj.properties.set({hintContent: \"Координаты: \" +placemark.coords});\r\n\t\t\t\r\n\r\n\t\t\tmapSetCenterAndZoom(\r\n\t\t\t\tthis.changePolyline(), \r\n\t\t\t\tthis.autozoomON=== \"ON\"\r\n\t\t\t);\r\n\r\n\t\t\tthis.setState({update: Date.now()});\r\n\t\t};\r\n\r\n\t\t\r\n\t\t\r\n\r\n\t\tthisMap.events.add(\"click\", this.evCreatePlacemark); // событие клика по карте генерирующее событие создания метки\r\n\r\n\t\tthis.polyline= addPolyline([]); // инициализация polyline\r\n\t\tthis.multiRoute= addMultiRoute([]); // инициализация multiRoute\r\n\t\t\r\n\t\tthis.multiRoute.model.events // multiRoute обновляется ассинхронно и медленно вещаем события на его обновление\r\n\t\t\t.add(\"requestsuccess\", ()=> {\r\n\t\t\t\tthis.multiDistance= getMultiRouteDistance(this.multiRoute); // обновление данных расстояния по маршруту\r\n\t\t\t\tthis.setState({update: Date.now()});\r\n\t\t\t})\r\n\r\n\t\t\t.add(\"requestfail\", function (event) {\r\n\t\t\t\tthis.multiDistance= [];\r\n\t\t\t\tthis.setState({update: Date.now()});\r\n\t\t\t\tconsole.log(\"Ошибка: \" + event.get(\"error\").message);\r\n\t\t\t});\r\n\t}\r\n\r\n\trender() {\r\n\t\tif (process.env.NODE_ENV=== \"development\") {\r\n\t\t\tconsole.log (\r\n\t\t\t\t\"CoordPanel render\", \r\n\r\n\t\t\t\tDate.now()\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\treturn <div>\r\n\t\t\t<ul\r\n\t\t\t\tclassName= \"str\"\r\n\t\t\t>\t\r\n\t\t\t\t<li>\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tclassName= {this.autozoomON}\r\n\t\t\t\t\t\tonClick= {this.evAutozoomClick}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tавтозум\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tclassName= {this.routeON}\r\n\t\t\t\t\t\tonClick= {this.evRouteClick}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tмаршрут\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</li>\r\n\r\n\t\t\t\t<DropSelectList \r\n\t\t\t\t\tlabel= \"формат\"\r\n\t\t\t\t\tbuttons= {formatButtons} //если определять массивы функции и объекты внутри компонента то они будут пересоздаваться при каждом обновлении, следует избегать этого\r\n\r\n\t\t\t\t\tsetting= {this.state.format} \r\n\t\t\t\t\textClick= {this.evClickFormat}\r\n\t\t\t\t/>\r\n\t\t\t\r\n\t\t\t\t<DropSelectList \r\n\t\t\t\t\tlabel= \"шаг\"\r\n\t\t\t\t\tbuttons= {stepButtons}\r\n\t\t\t\t\r\n\t\t\t\t\tsetting= {this.state.step}\r\n\t\t\t\t\textClick= {this.evClickStep}\r\n\t\t\t\t/>\r\n\t\t\t\t\r\n\t\t\t</ul>\r\n\t\t\t\r\n\t\t\t<PlacemarkList // компонент отображающий координаты установленных меток\r\n\t\t\t\tplacemarkStore= {placemarkStore}\r\n\r\n\t\t\t\tformatSet= {this.formatSet}\r\n\t\t\t\tstep= {this.state.step}\r\n\r\n\t\t\t\t/* distance= {this.shortDistance} */\r\n\t\t\t\tevInputCoords= {this.evInputCoords}\r\n\t\t\t\tevDeletePlacemark= {this.evDeletePlacemark}\r\n\t\t\t/>\r\n\r\n\t\t\t<DistanceInfo // компонент отображающий информацию о дистанциях\r\n\t\t\t\tshortDistance= {this.shortDistance}\r\n\t\t\t\tmultiDistance= {this.multiDistance}\r\n\t\t\t/>\r\n\t\t\t\r\n\r\n\t\t</div>;\r\n\r\n\r\n\r\n\r\n\t\t\r\n\r\n\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default CoordPanel;\r\n","\r\n\r\n\r\n\r\nimport React from \"react\";\r\n\r\nimport CoordPanel from \"./CoordPanel.jsx\"; \r\n\r\nif (process.env.NODE_ENV=== \"development\") {\r\n\tconsole.log(\"MainPanel load\", Date.now());\r\n}\r\n\r\n// в данном случае наличие MainPanel (тк вложенный элемент один) избыточно а вообще позволяет удобно компоновать вложенные панели\r\nfunction MainPanel() { \r\n\tif (process.env.NODE_ENV=== \"development\") {\r\n\t\tconsole.log (\r\n\t\t\t\"MainPanel render\", \r\n\t\t\tDate.now()\r\n\t\t);\r\n\t}\r\n\r\n\r\n\treturn <div>\r\n\t\t<CoordPanel />\r\n\t\t\r\n\t</div>;\r\n}\r\n\r\n\r\nexport default MainPanel;","import \"./jquery-ui.min.css\";\nimport \"./index.css\";\n\n/* eslint-disable no-undef */\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\n/* import * as serviceWorker from \"./serviceWorker\"; */\n\nimport JQuery from \"jquery\"; \n\nimport \"jquery-ui/ui/core\";\nimport \"jquery-ui/ui/widgets/resizable\";\n\n\nimport {\n\tinitMap, // инициализация карты\n\tmapFitToViewport // установка карты в размер контейнера\n\n} from \"./api/ymap.js\";\n\n\n// eslint-disable-next-line no-unused-vars\nimport MainPanel from \"./components/MainPanel.jsx\";\n\nlet appContainer= document.getElementById(\"app-container\");\nlet mapContainer= document.createElement(\"div\"); // карту можно прикрепить и к элементу не прописанному в DOM, \n// что позволяет начать ее инициализацию до того как React отрисует дерево DOM\nmapContainer.id= \"map-conteiner\";\n\n\n// Возникновение событий загрузки DOM-дерева или документа не сигнализирует об окончании загрузки API ymaps. \n// То есть использование обработчиков событий типа document.ready, window.onload, jQuery.ready и пр. не позволяет определить, \n// готовы ли компоненты для использования.\n\n// Функция ymaps.ready исполняет включенный в нее код после того, как будет загружены компоненты API и DOM-дерево документа.\n// Так как компоненты React используют API ymaps то MainWindow загружается по событию ymaps.ready\n\n\nymaps.ready(function() {\n\t// создаем карту и прикреплем ее к mapContainer\n\tinitMap(mapContainer, appContainer);\n\n\tReactDOM.render(\n\t\t<div\n\t\t\tid= \"main-window\"\n\t\t>\n\t\t\t<MainPanel />\n\t\t\t<div id= \"map-container\"></div>\n\n\t\t</div>,\n\t\t\n\t\tappContainer,\n\t\t\n\t\tfunction() {\n\t\t\tif (process.env.NODE_ENV=== \"development\") {\n\t\t\t\tconsole.log (\"MainPanel mount\", Date.now());\n\t\t\t}\n\n\t\t\t// с помощью JQuery делаем контенер приложения изменяемого размера\n\t\t\tJQuery(appContainer).resizable({\n\t\t\t\tminWidth: 240,\n\t\t\t\tminHeight: 240,\n\n\t\t\t\t// при окончании изменнения размера контейнера приложения будет производится перерасчет размера карты \n\t\t\t\tstop: function() {\n\t\t\t\t\tmapFitToViewport();\n\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// заменяем созданный реактом элемент map-container элементом mapContainer к которому initMap уже прикрепил карту\n\t\t\t\n\t\t\t// суть этого действия  -\n\t\t\t// это позволяет инициализировать карту и ее api до того как React отрисует ее контейнер \"map-container\"\n\t\t\t// что дает компонентам использовать api карты в своих конструкторах (т.е. до того как будет отрисован элемент \"main-window\")\n\n\t\t\t// можно было бы просто вывести \"map-container\" из рендера React например так:\n\t\t\t// но это усложняет компоновку блоков приложения и нарушает его целостность\n\t\t\t// appContainer.innerHTML= `\n\t\t\t//\t<div id= \"main-window\">\n\t\t\t//\t\t<div id= \"react-container\"></div>\n\t\t\t//\t\t<div id= \"map-container\"></div>\n\t\t\t//\t</div>\n\t\t\t//`\n\n\t\t\t\n\t\t\tJQuery(\"#map-container\").replaceWith(mapContainer);\n\t\t\tmapFitToViewport();\n\n\t\t}\n\t);\n}); \n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n/* serviceWorker.unregister(); */\n"],"sourceRoot":""}